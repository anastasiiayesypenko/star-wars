{"version":3,"sources":["components/Layout/Layout.js","redux/types/types.js","axiosInstance/starWarsAxiosInstance.js","axiosInstance/imagesAxiosInstance.js","components/Tabs/TabImage.js","components/Tabs/TabContent.js","redux/actions/SWActionCreators.js","components/Tabs/Tabs.js","App.js","serviceWorker.js","redux/reducers/SavedItemsReducer.js","redux/reducers/SWListsReducer.js","redux/reducers/RootReducer.js","redux/store.js","index.js","components/Tabs/Tabs.module.scss","components/Layout/Layout.module.scss"],"names":["AppLayout","children","className","layout","appHeader","types","ADD_SAVED_ITEM","SET_SW_LIST","SET_SW_LIST_ERROR","START_SW_LIST_LOADING","RESET_SW_LIST","starWarsAxiosInstance","axios","create","baseURL","imagesAxiosInstance","params","client_id","process","TabImage","query","useState","undefined","imageSrc","setImageSrc","imageSrcLoading","setImageSrcLoading","handleError","useEffect","isSubscribed","then","response","data","results","urls","regular","catch","imageWrapper","size","tabImage","src","onError","alt","getFilteredSavedItems","savedItems","userInput","filter","savedItem","name","toLowerCase","includes","connect","state","SWLists","dispatch","setSWList","page","tab","type","get","res","a","payload","error","setSWListActionCreator","addSavedItem","itemToSave","item","resetLists","activeTab","setPage","setUserInput","loading","spin","Boolean","length","nameFilter","placeholder","onChange","e","target","value","itemLayout","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","Item","key","title","onClick","find","message","info","handleSaveItem","tabTitle","hoverCover","defaultCurrent","pageNumber","total","count","TabPane","Tabs","listOfTabs","TabsPanel","setActiveTab","tabPanel","map","TabContent","App","Layout","window","location","hostname","match","initialState","SavedItemsReducer","planets","starships","SWListsReducer","RootReducer","combineReducers","middlewares","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.912a133b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport { appHeader, layout } from \"./Layout.module.scss\";\r\n\r\nconst AppLayout = ({ children }) => {\r\n  return (\r\n    <Layout className={layout}>\r\n      <header className={appHeader}>Star Wars App</header>\r\n      {children}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","const types = {\r\n  ADD_SAVED_ITEM: \"ADD_SAVED_ITEM\",\r\n  SET_SW_LIST: \"SET_SW_LIST\",\r\n  SET_SW_LIST_ERROR: \"SET_SW_LIST_ERROR\",\r\n  START_SW_LIST_LOADING: \"START_SW_LIST_LOADING\",\r\n  RESET_SW_LIST: \"RESET_SW_LIST\"\r\n};\r\n\r\nexport default types;\r\n","import axios from \"axios\";\r\n\r\nconst starWarsAxiosInstance = axios.create({\r\n  baseURL: \"https://swapi.dev/api/\",\r\n});\r\n\r\nexport default starWarsAxiosInstance;\r\n","import axios from \"axios\";\r\n\r\nconst imagesAxiosInstance = axios.create({\r\n  baseURL: \"https://api.unsplash.com/search/photos?page=1\",\r\n  params: {client_id: process.env.REACT_APP_SECRET_CODE},\r\n});\r\n\r\nexport default imagesAxiosInstance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Spin } from \"antd\";\r\n\r\nimport imagesAxiosInstance from \"../../axiosInstance/imagesAxiosInstance\";\r\nimport { imageWrapper, tabImage } from \"./Tabs.module.scss\";\r\n\r\nconst TabImage = ({ query }) => {\r\n  const [imageSrc, setImageSrc] = useState(undefined);\r\n  const [imageSrcLoading, setImageSrcLoading] = useState(true);\r\n\r\n  const handleError = () => {\r\n    setImageSrcLoading(false);\r\n    setImageSrc(\r\n      \"https://img5.goodfon.com/wallpaper/nbig/d/a7/darth-vader-star-wars-sith-helmet-simple-background-digital.jpg\"\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    if (isSubscribed) {\r\n      setImageSrcLoading(true);\r\n      imagesAxiosInstance({ params: { query } })\r\n        .then((response) => {\r\n          setImageSrcLoading(false);\r\n          setImageSrc(\r\n            response.data.results &&\r\n              response.data.results[0] &&\r\n              response.data.results[0].urls.regular\r\n          );\r\n        })\r\n        .catch(() => handleError());\r\n    }\r\n    return () => (isSubscribed = false);\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className={imageWrapper}>\r\n      {imageSrcLoading ? (\r\n        <Spin size=\"large\" />\r\n      ) : (\r\n        <img\r\n          className={tabImage}\r\n          src={\r\n            imageSrc ||\r\n            \"https://img5.goodfon.com/wallpaper/nbig/d/a7/darth-vader-star-wars-sith-helmet-simple-background-digital.jpg\"\r\n          }\r\n          onError={handleError}\r\n          alt=\"star wars\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabImage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Spin, Pagination, message, Input } from \"antd\";\r\n\r\nimport { spin, tabTitle, hoverCover, nameFilter } from \"./Tabs.module.scss\";\r\nimport {\r\n  addSavedItemActionCreator,\r\n  setSWListActionCreator,\r\n  resetSWListActionCreator,\r\n} from \"../../redux/actions/SWActionCreators\";\r\nimport TabImage from \"./TabImage\";\r\n\r\nconst getFilteredSavedItems = (savedItems, userInput) => {\r\n  return savedItems.filter((savedItem) =>\r\n    savedItem.name.toLowerCase().includes(userInput)\r\n  );\r\n};\r\n\r\nconst SavedItemsTabContent = ({\r\n  activeTab,\r\n  savedItems,\r\n  SWLists,\r\n  setSWList,\r\n  addSavedItem,\r\n  resetLists,\r\n}) => {\r\n  const [page, setPage] = useState(1);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    if (isSubscribed && activeTab !== \"saved\") {\r\n      resetLists();\r\n      setSWList(page, activeTab);\r\n    }\r\n    return () => {\r\n      isSubscribed = false;\r\n    };\r\n  }, [page, activeTab, setSWList, resetLists]);\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    if (isSubscribed) {\r\n      setPage(1);\r\n    }\r\n    return () => {\r\n      isSubscribed = false;\r\n    };\r\n  }, [activeTab]);\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setPage(pageNumber);\r\n  };\r\n\r\n  const handleSaveItem = (item) => {\r\n    if (activeTab !== \"saved\") {\r\n      const isItemInSaved = savedItems.find(\r\n        (savedItem) => savedItem.name === item.name\r\n      );\r\n      if (isItemInSaved) {\r\n        message.error(`${item.name} is already added!`);\r\n      } else {\r\n        message.info(`${item.name} was saved!`);\r\n\r\n        addSavedItem(item);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChangeUserInput = (e) => {\r\n    setUserInput(e.target.value);\r\n  };\r\n\r\n  return SWLists.loading ? (\r\n    <Spin size=\"large\" className={spin} />\r\n  ) : (\r\n    <>\r\n      {activeTab === \"saved\" && Boolean(savedItems.length) && (\r\n        <Input\r\n          className={nameFilter}\r\n          placeholder=\"Filter by name\"\r\n          onChange={handleChangeUserInput}\r\n        />\r\n      )}\r\n      <List\r\n        itemLayout=\"vertical\"\r\n        size=\"large\"\r\n        grid={{\r\n          gutter: 16,\r\n          xs: 1,\r\n          sm: 1,\r\n          md: 2,\r\n          lg: 2,\r\n          xl: 2,\r\n          xxl: 2,\r\n        }}\r\n        dataSource={\r\n          activeTab === \"saved\"\r\n            ? getFilteredSavedItems(savedItems, userInput)\r\n            : SWLists[activeTab] && SWLists[activeTab].results\r\n        }\r\n        renderItem={(item) => (\r\n          <List.Item key={item.title} onClick={() => handleSaveItem(item)}>\r\n            <TabImage query={item.name} />\r\n            <p className={tabTitle}>{item.name}</p>\r\n            <div className={hoverCover} />\r\n          </List.Item>\r\n        )}\r\n      />\r\n      <Pagination\r\n        defaultCurrent={page}\r\n        onChange={handlePageChange}\r\n        total={\r\n          activeTab === \"saved\"\r\n            ? getFilteredSavedItems(savedItems, userInput).length\r\n            : SWLists[activeTab] && SWLists[activeTab].count\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  savedItems: state.savedItems,\r\n  SWLists: state.SWLists,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSWList: (page, tab) => dispatch(setSWListActionCreator({ page, tab })),\r\n  addSavedItem: (itemToSave) => dispatch(addSavedItemActionCreator(itemToSave)),\r\n  resetLists: () => dispatch(resetSWListActionCreator()),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SavedItemsTabContent);\r\n","import types from \"../types/types\";\r\nimport starWarsAxiosInstance from \"../../axiosInstance/starWarsAxiosInstance\";\r\n\r\nexport const setSWListActionCreator = ({ page, tab }) => (dispatch) => {\r\n  dispatch({ type: types.START_SW_LIST_LOADING });\r\n  starWarsAxiosInstance\r\n    .get(`/${tab}/?page=${page}`)\r\n    .then(async (res) => {\r\n      dispatch({\r\n        type: types.SET_SW_LIST,\r\n        payload: { [tab]: res.data },\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch({ type: types.SET_SW_LIST_ERROR, payload: { error } });\r\n    });\r\n};\r\n\r\nexport const resetSWListActionCreator = () => ({ type: types.RESET_SW_LIST });\r\n\r\nexport const addSavedItemActionCreator = (item) => ({\r\n  type: types.ADD_SAVED_ITEM,\r\n  payload: { item },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\n\r\nimport { tabPanel } from \"./Tabs.module.scss\";\r\nimport TabContent from \"./TabContent\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst listOfTabs = [\r\n  {\r\n    title: \"planets\",\r\n  },\r\n  {\r\n    title: \"starships\",\r\n  },\r\n  { title: \"saved\" },\r\n];\r\n\r\nconst TabsPanel = () => {\r\n  const [activeTab, setActiveTab] = useState(\"planets\");\r\n\r\n  const handleTabChange = (key) => {\r\n    setActiveTab(key);\r\n  };\r\n\r\n  return <Tabs className={tabPanel} onChange={handleTabChange}>\r\n      {listOfTabs.map((item) => (\r\n        <TabPane tab={item.title} key={item.title}>\r\n          <TabContent activeTab={activeTab}/>\r\n        </TabPane>\r\n      ))}\r\n    </Tabs>\r\n};\r\n\r\nexport default TabsPanel;\r\n","import React from \"react\";\r\n\r\nimport Layout from \"./components/Layout/Layout\";\r\nimport Tabs from \"./components/Tabs/Tabs\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <Tabs />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import types from \"../types/types\";\r\n\r\nconst initialState = [];\r\n\r\nconst SavedItemsReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.ADD_SAVED_ITEM:\r\n      return [payload.item, ...state];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default SavedItemsReducer;\r\n","import types from \"../types/types\";\r\n\r\nconst initialState = {\r\n  error: null,\r\n  loading: true,\r\n  planets: {},\r\n  starships: {},\r\n};\r\n\r\nconst SWListsReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.START_SW_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case types.SET_SW_LIST:\r\n      return payload.planets\r\n        ? {\r\n            ...state,\r\n            planets: payload.planets,\r\n            loading: false,\r\n          }\r\n        : {\r\n            ...state,\r\n            starships: payload.starships,\r\n            loading: false,\r\n          };\r\n    case types.SET_SW_LIST_ERROR:\r\n      return { ...state, error: payload.error, loading: false };\r\n    case types.RESET_SW_LIST:\r\n      return { ...state, planets: {}, starships: {} };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default SWListsReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport SavedItemsReducer from \"./SavedItemsReducer\";\r\nimport SWListsReducer from \"./SWListsReducer\";\r\n\r\nconst RootReducer = combineReducers({\r\n  savedItems: SavedItemsReducer,\r\n  SWLists: SWListsReducer,\r\n});\r\n\r\nexport default RootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport RootReducer from \"./reducers/RootReducer\";\r\n\r\nconst middlewares = applyMiddleware(thunk);\r\nconst store = createStore(RootReducer, middlewares);\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport 'antd/dist/antd.css'; \r\n\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabPanel\":\"Tabs_tabPanel__14cMM\",\"spin\":\"Tabs_spin__1W7-W\",\"imageWrapper\":\"Tabs_imageWrapper__3mP2W\",\"tabImage\":\"Tabs_tabImage__1nm_3\",\"tabTitle\":\"Tabs_tabTitle__1DMYQ\",\"nameFilter\":\"Tabs_nameFilter__3_xCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appHeader\":\"Layout_appHeader__5RC-F\",\"layout\":\"Layout_layout__2DTHX\"};"],"sourceRoot":""}