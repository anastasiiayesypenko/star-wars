{"version":3,"sources":["components/Layout/Layout.js","redux/types/types.js","axiosInstance/starWarsAxiosInstance.js","axiosInstance/imagesAxiosInstance.js","components/Tabs/TabImage.js","components/Tabs/TabContent.js","redux/actions/SWActionCreators.js","components/Tabs/Tabs.js","App.js","serviceWorker.js","redux/reducers/SavedItemsReducer.js","redux/reducers/SWListsReducer.js","redux/reducers/RootReducer.js","redux/store.js","index.js","components/Tabs/Tabs.module.scss","components/Layout/Layout.module.scss"],"names":["AppLayout","children","className","layout","appHeader","types","ADD_SAVED_ITEM","SET_SW_LIST","SET_SW_LIST_ERROR","START_SW_LIST_LOADING","starWarsAxiosInstance","axios","create","baseURL","imagesAxiosInstance","params","client_id","process","TabImage","query","useState","undefined","imageSrc","setImageSrc","imageSrcLoading","setImageSrcLoading","handleError","useEffect","isSubscribed","then","response","data","results","urls","regular","catch","imageWrapper","size","tabImage","src","onError","alt","getFilteredSavedItems","savedItems","userInput","filter","savedItem","name","toLowerCase","includes","connect","state","SWLists","dispatch","setSWList","page","tab","type","get","res","a","payload","error","setSWListActionCreator","addSavedItem","itemToSave","item","activeTab","setPage","setUserInput","loading","spin","Boolean","length","nameFilter","placeholder","onChange","e","target","value","itemLayout","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","Item","key","title","onClick","find","message","info","handleSaveItem","tabTitle","hoverCover","defaultCurrent","pageNumber","total","count","TabPane","Tabs","listOfTabs","TabsPanel","setActiveTab","tabPanel","map","TabContent","App","Layout","window","location","hostname","match","initialState","SavedItemsReducer","planets","starships","SWListsReducer","RootReducer","combineReducers","middlewares","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.d14c5a38.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport { appHeader, layout } from \"./Layout.module.scss\";\r\n\r\nconst AppLayout = ({ children }) => {\r\n  return (\r\n    <Layout className={layout}>\r\n      <header className={appHeader}>Star Wars App</header>\r\n      {children}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","const types = {\r\n  ADD_SAVED_ITEM: \"ADD_SAVED_ITEM\",\r\n  SET_SW_LIST: \"SET_SW_LIST\",\r\n  SET_SW_LIST_ERROR: \"SET_SW_LIST_ERROR\",\r\n  START_SW_LIST_LOADING: \"START_SW_LIST_LOADING\"\r\n};\r\n\r\nexport default types;\r\n","import axios from \"axios\";\r\n\r\nconst starWarsAxiosInstance = axios.create({\r\n  baseURL: \"https://swapi.dev/api/\",\r\n});\r\n\r\nexport default starWarsAxiosInstance;\r\n","import axios from \"axios\";\r\n\r\nconst imagesAxiosInstance = axios.create({\r\n  baseURL: \"https://api.unsplash.com/search/photos?page=1\",\r\n  params: {client_id: process.env.REACT_APP_SECRET_CODE},\r\n});\r\n\r\nexport default imagesAxiosInstance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Spin } from \"antd\";\r\n\r\nimport imagesAxiosInstance from \"../../axiosInstance/imagesAxiosInstance\";\r\nimport { imageWrapper, tabImage } from \"./Tabs.module.scss\";\r\n\r\nconst TabImage = ({ query }) => {\r\n  const [imageSrc, setImageSrc] = useState(undefined);\r\n  const [imageSrcLoading, setImageSrcLoading] = useState(true);\r\n\r\n  const handleError = () => {\r\n    setImageSrcLoading(false);\r\n    setImageSrc(\r\n      \"https://img5.goodfon.com/wallpaper/nbig/d/a7/darth-vader-star-wars-sith-helmet-simple-background-digital.jpg\"\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    if (isSubscribed) {\r\n      setImageSrcLoading(true);\r\n      imagesAxiosInstance({ params: { query } })\r\n        .then((response) => {\r\n          setImageSrcLoading(false);\r\n          setImageSrc(\r\n            response.data.results &&\r\n              response.data.results[0] &&\r\n              response.data.results[0].urls.regular\r\n          );\r\n        })\r\n        .catch(() => handleError());\r\n    }\r\n    return () => (isSubscribed = false);\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className={imageWrapper}>\r\n      {imageSrcLoading ? (\r\n        <Spin size=\"large\" />\r\n      ) : (\r\n        <img\r\n          className={tabImage}\r\n          src={\r\n            imageSrc ||\r\n            \"https://img5.goodfon.com/wallpaper/nbig/d/a7/darth-vader-star-wars-sith-helmet-simple-background-digital.jpg\"\r\n          }\r\n          onError={handleError}\r\n          alt=\"star wars\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabImage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Spin, Pagination, message, Input } from \"antd\";\r\n\r\nimport { spin, tabTitle, hoverCover, nameFilter } from \"./Tabs.module.scss\";\r\nimport {\r\n  addSavedItemActionCreator,\r\n  setSWListActionCreator,\r\n} from \"../../redux/actions/SWActionCreators\";\r\nimport TabImage from \"./TabImage\";\r\n\r\nconst getFilteredSavedItems = (savedItems, userInput) => {\r\n  return savedItems.filter((savedItem) =>\r\n    savedItem.name.toLowerCase().includes(userInput)\r\n  );\r\n};\r\n\r\nconst SavedItemsTabContent = ({\r\n  activeTab,\r\n  savedItems,\r\n  SWLists,\r\n  setSWList,\r\n  addSavedItem,\r\n}) => {\r\n  const [page, setPage] = useState(1);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    if (isSubscribed && activeTab !== \"saved\") {\r\n      setSWList(page, activeTab);\r\n    }\r\n    return () => {\r\n      isSubscribed = false;\r\n    };\r\n  }, [page, activeTab, setSWList]);\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    if (isSubscribed) {\r\n      setPage(1);\r\n    }\r\n    return () => {\r\n      isSubscribed = false;\r\n    };\r\n  }, [activeTab]);\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setPage(pageNumber);\r\n  };\r\n\r\n  const handleSaveItem = (item) => {\r\n    if (activeTab !== \"saved\") {\r\n      const isItemInSaved = savedItems.find(\r\n        (savedItem) => savedItem.name === item.name\r\n      );\r\n      if (isItemInSaved) {\r\n        message.error(`${item.name} is already added!`);\r\n      } else {\r\n        message.info(`${item.name} was saved!`);\r\n\r\n        addSavedItem(item);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChangeUserInput = (e) => {\r\n    setUserInput(e.target.value);\r\n  };\r\n\r\n  return SWLists.loading ? (\r\n    <Spin size=\"large\" className={spin} />\r\n  ) : (\r\n    <>\r\n      {activeTab === \"saved\" && Boolean(savedItems.length) && (\r\n        <Input\r\n          className={nameFilter}\r\n          placeholder=\"Filter by name\"\r\n          onChange={handleChangeUserInput}\r\n        />\r\n      )}\r\n      <List\r\n        itemLayout=\"vertical\"\r\n        size=\"large\"\r\n        grid={{\r\n          gutter: 16,\r\n          xs: 1,\r\n          sm: 1,\r\n          md: 2,\r\n          lg: 2,\r\n          xl: 2,\r\n          xxl: 2,\r\n        }}\r\n        dataSource={\r\n          activeTab === \"saved\"\r\n            ? getFilteredSavedItems(savedItems, userInput)\r\n            : SWLists[activeTab] && SWLists[activeTab].results\r\n        }\r\n        renderItem={(item) => (\r\n          <List.Item key={item.title} onClick={() => handleSaveItem(item)}>\r\n            <TabImage query={item.name} />\r\n            <p className={tabTitle}>{item.name}</p>\r\n            <div className={hoverCover} />\r\n          </List.Item>\r\n        )}\r\n      />\r\n      <Pagination\r\n        defaultCurrent={page}\r\n        onChange={handlePageChange}\r\n        total={\r\n          activeTab === \"saved\"\r\n            ? getFilteredSavedItems(savedItems, userInput).length\r\n            : SWLists[activeTab] && SWLists[activeTab].count\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  savedItems: state.savedItems,\r\n  SWLists: state.SWLists,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSWList: (page, tab) => dispatch(setSWListActionCreator({ page, tab })),\r\n  addSavedItem: (itemToSave) => dispatch(addSavedItemActionCreator(itemToSave)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SavedItemsTabContent);\r\n","import types from \"../types/types\";\r\nimport starWarsAxiosInstance from \"../../axiosInstance/starWarsAxiosInstance\";\r\n\r\nexport const setSWListActionCreator = ({ page, tab }) => (dispatch) => {\r\n  dispatch({ type: types.START_SW_LIST_LOADING });\r\n  starWarsAxiosInstance\r\n    .get(`/${tab}/?page=${page}`)\r\n    .then(async (res) => {\r\n      dispatch({\r\n        type: types.SET_SW_LIST,\r\n        payload: { [tab]: res.data },\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch({ type: types.SET_SW_LIST_ERROR, payload: { error } });\r\n    });\r\n};\r\n\r\nexport const addSavedItemActionCreator = (item) => ({\r\n  type: types.ADD_SAVED_ITEM,\r\n  payload: { item },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\n\r\nimport { tabPanel } from \"./Tabs.module.scss\";\r\nimport TabContent from \"./TabContent\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst listOfTabs = [\r\n  {\r\n    title: \"planets\",\r\n  },\r\n  {\r\n    title: \"starships\",\r\n  },\r\n  { title: \"saved\" },\r\n];\r\n\r\nconst TabsPanel = () => {\r\n  const [activeTab, setActiveTab] = useState(\"planets\");\r\n\r\n  const handleTabChange = (key) => {\r\n    setActiveTab(key);\r\n  };\r\n\r\n  return <Tabs className={tabPanel} onChange={handleTabChange}>\r\n      {listOfTabs.map((item) => (\r\n        <TabPane tab={item.title} key={item.title}>\r\n          <TabContent activeTab={activeTab}/>\r\n        </TabPane>\r\n      ))}\r\n    </Tabs>\r\n};\r\n\r\nexport default TabsPanel;\r\n","import React from \"react\";\n\nimport Layout from \"./components/Layout/Layout\";\nimport Tabs from \"./components/Tabs/Tabs\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Tabs />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import types from \"../types/types\";\r\n\r\nconst initialState = [];\r\n\r\nconst SavedItemsReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.ADD_SAVED_ITEM:\r\n      return [payload.item, ...state];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default SavedItemsReducer;\r\n","import types from \"../types/types\";\r\n\r\nconst initialState = {\r\n  error: null,\r\n  loading: true,\r\n  planets: {},\r\n  starships: {},\r\n};\r\n\r\nconst SWListsReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.START_SW_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case types.SET_SW_LIST:\r\n      return payload.planets\r\n        ? {\r\n            ...state,\r\n            planets: payload.planets,\r\n            loading: false,\r\n          }\r\n        : {\r\n            ...state,\r\n            starships: payload.starships,\r\n            loading: false,\r\n          };\r\n    case types.SET_SW_LIST_ERROR:\r\n      return { ...state, error: payload.error, loading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default SWListsReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport SavedItemsReducer from \"./SavedItemsReducer\";\r\nimport SWListsReducer from \"./SWListsReducer\";\r\n\r\nconst RootReducer = combineReducers({\r\n  savedItems: SavedItemsReducer,\r\n  SWLists: SWListsReducer,\r\n});\r\n\r\nexport default RootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport RootReducer from \"./reducers/RootReducer\";\r\n\r\nconst middlewares = applyMiddleware(thunk);\r\nconst store = createStore(RootReducer, middlewares);\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport 'antd/dist/antd.css'; \n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabPanel\":\"Tabs_tabPanel__14cMM\",\"spin\":\"Tabs_spin__1W7-W\",\"imageWrapper\":\"Tabs_imageWrapper__3mP2W\",\"tabImage\":\"Tabs_tabImage__1nm_3\",\"tabTitle\":\"Tabs_tabTitle__1DMYQ\",\"nameFilter\":\"Tabs_nameFilter__3_xCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appHeader\":\"Layout_appHeader__5RC-F\",\"layout\":\"Layout_layout__2DTHX\"};"],"sourceRoot":""}